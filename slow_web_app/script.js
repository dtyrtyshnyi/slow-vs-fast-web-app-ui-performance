// URL "–ø–æ–≥–∞–Ω–æ–≥–æ" API –Ω–∞ AWS EC2 –∞–±–æ –ª–æ–∫–∞–ª—å–Ω–æ
//const API_HOST = 'http://localhost:4000';
//const API_HOST = 'http://192.168.0.103:4000';
//const API_HOST = 'http://my-lb-999493181.eu-central-1.elb.amazonaws.com';
const API_HOST = 'https://d8eaabtb7vxfq.cloudfront.net';
const API_URL = `${API_HOST}/api/products`;

// –ü–†–û–ë–õ–ï–ú–ê UI 3: "–í–∞–∂–∫–∏–π" —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π JS –Ω–∞ –∫–ª—ñ—î–Ω—Ç—ñ
function blockClientThread(duration) {
    const start = Date.now();
    while (Date.now() - start < duration) {}
    console.log(`CLIENT thread was blocked for ${duration}ms`);
}
// –ë–ª–æ–∫—É—î–º–æ –∫–ª—ñ—î–Ω—Ç—Å—å–∫–∏–π –ø–æ—Ç—ñ–∫
blockClientThread(200); 

document.addEventListener('DOMContentLoaded', () => {
    // –ó–∞–ø—É—Å–∫–∞—î–º–æ –ª–æ–≥—ñ–∫—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤
    loadProducts();

    // –ü–†–û–ë–õ–ï–ú–ê UI 4: –î–∏–Ω–∞–º—ñ—á–Ω–∏–π –±–∞–Ω–µ—Ä (CLS)
    setTimeout(() => {
        const bannerContainer = document.getElementById('dynamic-banner-container');
        if (bannerContainer) {
            const banner = document.createElement('div');
            banner.className = 'dynamic-banner';
            banner.textContent = 'üî• Flash Sale! Everything 50% off! üî•';
            bannerContainer.appendChild(banner);
        }
    }, 1000); 
});

// -----------------------------------------------------------------
// *** –ù–û–í–ò–ô –ë–û–¢–õ–ù–ï–ö: –ü–æ—Å–ª—ñ–¥–æ–≤–Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω—å ***
// -----------------------------------------------------------------

/**
 * –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è: –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î –æ–¥–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
 * —ñ –ø–æ–≤–µ—Ä—Ç–∞—î Promise, —è–∫–∏–π –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è, –∫–æ–ª–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ.
 */
function loadImage(src) {
    return new Promise((resolve, reject) => {
        const img = new Image();
        img.onload = () => resolve(img);
        img.onerror = (err) => reject(new Error(`Failed to load image: ${src}`, { cause: err }));
        img.src = src;
    });
}

/**
 * –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É.
 * –í–æ–Ω–∞ –±—É–¥–µ —á–µ–∫–∞—Ç–∏ (await) –Ω–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ö–û–ñ–ù–û–ì–û –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
 * –ø–µ—Ä–µ–¥ —Ç–∏–º, —è–∫ –ø–æ—á–∞—Ç–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–µ.
 */
async function renderProductsSequentially(products) {
    const grid = document.getElementById('product-grid');
    grid.innerHTML = ''; // –û—á–∏—â—É—î–º–æ –ª–æ–∞–¥–µ—Ä (—Å–ø—Ä–∏—á–∏–Ω—è—î CLS - —Ü–µ –¥–æ–±—Ä–µ –¥–ª—è v1)

    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ for...of, —â–æ–± 'await' –ø—Ä–∞—Ü—é–≤–∞–≤ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ —Ü–∏–∫–ª—É
    for (const product of products) {
        console.log(`[BOTTLENECK] Starting to load ${product.imageUrl}...`);
        
        let loadedImage;
        try {
            // *** –û–°–¨ –¢–£–¢ –ë–û–¢–õ–ù–ï–ö ***
            // –ú–∏ —á–µ–∫–∞—î–º–æ, –¥–æ–∫–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ–≤–Ω—ñ—Å—Ç—é –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç—å—Å—è
            loadedImage = await loadImage(product.imageUrl);
            console.log(`[BOTTLENECK] ...Finished loading ${product.imageUrl}`);

        } catch (error) {
            console.error(error);
            // –Ø–∫—â–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–ª–æ—Å—å, —Å—Ç–≤–æ—Ä—é—î–º–æ "–∑–∞–≥–ª—É—à–∫—É"
            loadedImage = document.createElement('div');
            loadedImage.className = 'image-placeholder-error';
            loadedImage.textContent = 'Image failed to load';
        }
        
        // –¢–µ–ø–µ—Ä, –∫–æ–ª–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ï, —Å—Ç–≤–æ—Ä—é—î–º–æ –∫–∞—Ä—Ç–∫—É
        const card = document.createElement('div');
        card.className = 'product-card';
        
        loadedImage.alt = product.name;
        card.appendChild(loadedImage);
        
        const title = document.createElement('h3');
        title.textContent = product.name;
        card.appendChild(title);
        
        const desc = document.createElement('p');
        desc.textContent = product.description;
        card.appendChild(desc);

        grid.appendChild(card);
        
        // –¶–∏–∫–ª –Ω–µ –ø–µ—Ä–µ–π–¥–µ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ 'product'
        // –¥–æ–∫–∏ –ø–æ—Ç–æ—á–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç—å—Å—è.
    }
    console.log('All sequential loading finished.');
}


/**
 * –§—É–Ω–∫—Ü—ñ—è, —â–æ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î –¥–∞–Ω—ñ –∑ API
 */
async function loadProducts() {
    const grid = document.getElementById('product-grid');
    
    try {
        const response = await fetch(API_URL);
        
        if (!response.ok) {
            throw new Error(`Server error! Status: ${response.status}`);
        }
        
        const products = await response.json();
        
        // *** –í–ò–ö–õ–ò–ö–ê–Ñ–ú–û –ù–û–í–£ "–ü–û–í–Ü–õ–¨–ù–£" –§–£–ù–ö–¶–Ü–Æ ***
        await renderProductsSequentially(products);

    } catch (error) {
        console.error("Failed to load products:", error);
        if (grid) {
            grid.innerHTML = `<div class="error">Failed to load products. Please check your connection or try again later.</div>`;
        }
    }
}